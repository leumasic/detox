// west build -p -b nice_nano_v2 -- -DSHIELD=detox_left -DZMK_CONFIG="detox"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "34.h"

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150
#define QUICK_TAP_MS 175

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

#define DEF 0
#define NAV 1
#define NUM 2
#define FN 3
#define SYS 4

#define ___ &trans

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH1 LH0 RH0 RH1

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

/ {
      conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <FN NUM>;
            then-layer = <SYS>;
        };
      };

      macros {
        dot_spc: dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };
      };

      behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hls: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hrs: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        spc_morph: space_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            bindings = <&kp SPC>, <&dot_spc>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_spc: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            flavor = "balanced";
            tapping-term-ms = <200>;
			quick-tap-ms = <QUICK_TAP_MS>;

            bindings = <&mo>, <&spc_morph>;
        };

        masked_home: masked_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            bindings = <&kp HOME>, <&kp HOME>;
            mods = <(MOD_LCTL)>;
        };

        mt_home: mt_home {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            MT_CORE
            bindings = <&masked_home>, <&kp>;
        };

        masked_end: masked_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            bindings = <&kp END>, <&kp END>;
            mods = <(MOD_LCTL)>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT | MOD_RSFT)>;
        };

        mt_end: mt_end {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;

            MT_CORE
            bindings = <&masked_end>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp ESC>;
            key-positions = <LT3 LT2>;
            layers = <DEF NAV NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_bspc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp BSPC>;
            key-positions = <RT1 RT2>;
            layers = <DEF NAV NUM FN>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&hml LS(LALT)TAB>;
            key-positions = <LM3 LM2>;
            layers = <DEF NAV NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LT>;
            key-positions = <RM0 RM1>;
            layers = <NAV>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_gt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp GT>;
            key-positions = <RM1 RM2>;
            layers = <NAV>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lpar {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&lpar_lt>;
            key-positions = <RM0 RM1>;
            layers = <DEF NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rpar {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&rpar_gt>;
            key-positions = <RM1 RM2>;
            layers = <DEF NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbkt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LBKT>;
            key-positions = <RB0 RB1>;
            layers = <DEF NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbkt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp RBKT>;
            key-positions = <RB1 RB2>;
            layers = <DEF NUM>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbrc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LBRC>;
            key-positions = <RB0 RB1>;
            layers = <NAV>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_rbrc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp RBRC>;
            key-positions = <RB1 RB2>;
            layers = <NAV>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp Q         &kp W         &kp E         &kp R         &kp T           &kp Y         &kp U         &kp I         &kp O         &kp P       
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT S   &hls LSHIFT D &hml LCTRL F  &kp G           &hmr RCTRL H  &hrs RSHIFT J &hmr LALT K   &hmr LGUI L   &kp SEMI    
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp Z         &kp X         &kp C         &kp V         &kp B           &kp N         &kp M         &kp COMMA     &kp DOT       &kp SLASH   
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              &lt_spc NAV 0 &mo FN          &mo NUM       &kp ENTER
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
            >;
        };

        nav_layer {
            display-name = "Navigation";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___             ___           NAV_BSPC      ___           NAV_DEL       ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &sk LGUI      &sk LALT      &sk LSHFT     &sk LCTRL     ___             NAV_LEFT      NAV_DOWN      NAV_UP        NAV_RIGHT     ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___             ___           ___           ___           ___           ___
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___             ___           &kp K_CANCEL
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
            >;
        };

        num_layer {
            display-name = "Number";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           &kp N7        &kp N8        &kp N9        ___             ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &hml LGUI N0  &hml LALT N4  &hml LSHFT N5 &hml LCTRL N6 ___             ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           &kp N1        &kp N2        &kp N3        ___             ___           ___           ___           ___           ___
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___             ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
            >;
        };

        fn_layer {
            display-name = "Function";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___             &kp TILDE     &kp SLASH     &kp AMPERSAND &kp BSLH      &gresc
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___             &kp MINUS     &kp EQUAL     &kp ASTERISK  &kp SQT       ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___             ___           ___           ___           ___           ___
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___             ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
            >;
        };

        sys_layer {
            display-name = "System";
            bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___             ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &studio_unlock ___           ___           ___           &bootloader     &bootloader   ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           &sys_reset      &sys_reset    ___           ___           ___           ___
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___             ___           ___
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
            >;
        };
    };
};
